1. почему использовал Http POST вместо GET: GET имеет ограничение по символам в URI,
а передаваемая начальная ссылка может иметь уже предельное значение символов. Аналогичная проблема с текстом
Хочу отметь, что есть и другие решения этой проблемы, но я выбрал самый простой вариант

2. Http status:
404 Not Found - возвращать эту ошибку предлагаю в нескольких вариантах.
Первый, если начальная ссылка не найдена.
Второй, при выполнение, нашего алгоритма, когда мы скачиваем HTML Document, а нам возвращается ошибка
например такая 'Too many redirects occurred trying to load URL' хотя может тут уместнее будет, 410 Gone
либо 500 Internal Server Error

400 Bad Request - это ошибку будем возвращать при валидации полей и если поля обязательное

3. То что хотел сделать и не успел, хотел подключить WebSocket и создать Spring Events,
чтобы в Runtime отправлять на клиента какие ссылки сейчаc обрабатываются и какие error произошли.
Второй вариант использовать broadcast manager 'Kafka, RabbitMQ'
выбор broadcast manager зависит от количества обрабатываемой информации

4. Для тестирования предлагаю использовать spock framework.
Класс ImplHtmlDocumentServices покрываем юнит тестами и так как у spock,
есть возможность в одном тесте реализовать несколько кейсов, так мы реализуем несколько позитивных кейсов.
Далее нам нужно будет проверить на error наш сервис,
например один из них MalformedURLException когда на вход получаем битый URL.

Компонентными тестами покрываем класс HtmlDocumentController? также как и в юнит тестах,
пишем пару позитивных кейсов, а остальные проверяем статусы ошибок например 'Not Found'

И наше API нужно покрыть интеграционными тестами

Еще предлагаю использовать подход в тестирование как:
Классов эквивалентности - по той причине, что кейсов может быть очень много, а если на все напишем тесты,
то столкнёмся с двумя проблемами, первое наши тесты будут долго отрабатывать,
второе чем больше тестов тем тяжелее их поддерживать.

5. Дополнительно:
В приложений, нужно ограничить передаваемое число для количества потоков и обязательно нужно написать валидацию на root URL.
Нужно создать СI на jenkins, где нужно проверить сборку приложения и для запуска тестов

На даном этапе возвращаю Map<String, Integer> для тестирования приложения через Postman